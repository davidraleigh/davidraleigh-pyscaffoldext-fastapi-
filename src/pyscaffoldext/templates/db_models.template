from sqlalchemy import Column, DateTime, Index, Integer, String, text
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.sql import expression
from sqlalchemy.sql.ddl import CreateColumn

from ${qual_pkg}.db import Base


class UTCNow(expression.FunctionElement):
    type = DateTime()


@compiles(UTCNow, "postgresql")
def pg_utcnow(element, compiler, **kw):
    return "TIMEZONE('utc', CURRENT_TIMESTAMP)"


@compiles(CreateColumn, "postgresql")
def use_identity(element, compiler, **kw):
    return compiler.visit_create_column(element, **kw).replace(
        "SERIAL", "INT GENERATED BY DEFAULT AS IDENTITY"
    )


class BaseDBModel:
    id = Column(Integer, primary_key=True)
    created_at = Column(DateTime, server_default=UTCNow())
    updated_at = Column(DateTime, onupdate=UTCNow())


class DBRecord(BaseDBModel, Base):
    __tablename__ = "db_records"

    name = Column(String)

    __table_args__ = (Index("uq_db_records_name", text("lower(name)"), unique=True),)
